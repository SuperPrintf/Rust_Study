/* 所有权的基础概念 */
//Rust 中的每个值都有一个变量，称为其所有者
//一次只能有一个所有者
//当所有者不在程序运行范围时，该值将被删除

fn main() {

    /* 变量的所有权 */
    //变量会在进入作用域后变得有效
    //变量会保持自己的有效性,直至离开作用域为止
    let x = { //变量n还未被声明,在此处是不可用的
        let n = 20; //从这里开始变量n变得可用
        n + 1 //执行与n相关的操作
    }; //做用域到此处结束,变量n不再可用
    println!("{}", x);

    /* 内存分配 */
    //使用的内存是由操作系统在运行时动态分配出来的
    //当使用完String之后,需要通过某种方式来将这些内存归还操作系统
        /* drop()释放 */
        //Rust在变量离开作用域时,会调用叫drop()的特殊函数
        //String类型的作者可以在drop()函数中编写释放内存的代码
        //Rust会在作用域结束的地方(即}处)自动调用drop函数
    {//通过String::from()可根据字符串字面量创建String类对象
        let mut s = String::from("Hello"); //从这里开始,变量s变得有效
        //执行与s相关的操作
        s.push_str(" world");//push_str()函数向String空间尾部添加字符串字面量
        println!("{}", s);
    }//作用域在此处结束

    /* 移动(move) */
    //Rust一般不发生浅拷贝,而是通过移动
    let a = String::from("Hello, world");
    let b = a;//此处通过移动(move)将变量a拷贝到b并让a失效
    println!("{}", b);
    //特殊的,基础变量类型不涉及复杂操作,由于资源消耗均等,将直接执行深拷贝
    let n1 = 11; //类型长度确定
    let n2 = n1; //此时进行深拷贝,两者均有效
    println!("n1 = {}, n2 = {}", n1, n2);

    /*深拷贝*/
    let s1 = String::from("Hello, world");
    let s2 = s1.clone();//通过clone特性(trait)为s2开辟空间进行深拷贝,仍会保留s1
    //此时s1变量与s2变量均有效
    println!("{}", s1);
    println!("{}", s2);

}

